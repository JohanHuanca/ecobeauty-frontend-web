-- ##############################################################
-- ## üìú √âPICA 0: AUTENTICACI√ìN Y PERFILES (BASE)
-- ##############################################################

-- Tabla para perfiles extendidos, vinculada a los usuarios de Supabase Auth.
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  avatar_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.profiles IS 'Almacena datos p√∫blicos de los perfiles de usuario.';

-- Tabla para definir los roles de la aplicaci√≥n.
CREATE TABLE public.roles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.roles IS 'Define los roles de usuario (ej. principiante, experto).';

-- Tabla de uni√≥n para asignar roles a los perfiles.
CREATE TABLE public.user_roles (
  profile_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  role_id BIGINT NOT NULL REFERENCES public.roles(id) ON DELETE CASCADE,
  PRIMARY KEY (profile_id, role_id)
);
COMMENT ON TABLE public.user_roles IS 'Asigna uno o m√°s roles a cada perfil de usuario.';

-- Insertar los roles iniciales.
INSERT INTO public.roles (name, description) VALUES
('expert', 'Usuario experto que puede crear cursos y ofrecer servicios.'),
('novice', 'Usuario principiante que consume contenido y participa en la comunidad.');

-- Funci√≥n autom√°tica para crear un perfil y asignar rol de 'novice' a nuevos usuarios.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
  v_default_role_id BIGINT;
BEGIN
  -- Crear el perfil del usuario
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url'
  );

  -- Obtener el ID del rol por defecto 'novice'
  SELECT id INTO v_default_role_id FROM public.roles WHERE name = 'novice';

  -- Asignar el rol por defecto si existe
  IF v_default_role_id IS NOT NULL THEN
    INSERT INTO public.user_roles (profile_id, role_id)
    VALUES (new.id, v_default_role_id);
  END IF;
  
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger que ejecuta la funci√≥n despu√©s de que un nuevo usuario se registra en Supabase Auth.
CREATE OR REPLACE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();


-- ##############################################################
-- ## üìú √âPICA 1: TUTORIALES
-- ##############################################################

-- Tabla para almacenar los tutoriales gratuitos.
CREATE TABLE public.tutorials (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  video_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.tutorials IS 'Contenido educativo gratuito creado por expertos.';

-- Tabla para los comentarios en los tutoriales.
CREATE TABLE public.tutorial_comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  tutorial_id BIGINT NOT NULL REFERENCES public.tutorials(id) ON DELETE CASCADE,
  parent_comment_id BIGINT REFERENCES public.tutorial_comments(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.tutorial_comments IS 'Comentarios y respuestas de los usuarios en los tutoriales.';

-- Tabla para los "me gusta" en los tutoriales.
CREATE TABLE public.tutorial_likes (
  profile_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  tutorial_id BIGINT NOT NULL REFERENCES public.tutorials(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (profile_id, tutorial_id)
);
COMMENT ON TABLE public.tutorial_likes IS 'Registra los "me gusta" de los usuarios en los tutoriales.';


-- ##############################################################
-- ## üí¨ √âPICA 2: COMUNIDAD
-- ##############################################################

-- Tabla para las publicaciones en la comunidad.
CREATE TABLE public.posts (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  image_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.posts IS 'Publicaciones de los usuarios en el muro de la comunidad.';

-- Tabla para los comentarios en las publicaciones.
CREATE TABLE public.post_comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  profile_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  parent_comment_id BIGINT REFERENCES public.post_comments(id) ON DELETE CASCADE,
  content TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.post_comments IS 'Comentarios y respuestas en las publicaciones de la comunidad.';


-- ##############################################################
-- ## üéì √âPICA 3: CURSOS
-- ##############################################################

-- Tabla para los cursos de pago.
CREATE TABLE public.courses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  expert_profile_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  price NUMERIC(10, 2) NOT NULL DEFAULT 0.00,
  is_published BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.courses IS 'Cursos de pago creados por usuarios con rol de experto.';

-- Tabla para las lecciones dentro de cada curso.
CREATE TABLE public.course_lessons (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  course_id BIGINT NOT NULL REFERENCES public.courses(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  content_text TEXT,
  video_url TEXT,
  lesson_order INT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.course_lessons IS 'Lecciones individuales que componen un curso.';

-- Tabla para registrar las inscripciones/compras de cursos por parte de los usuarios.
CREATE TABLE public.course_enrollments (
  profile_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  course_id BIGINT NOT NULL REFERENCES public.courses(id) ON DELETE CASCADE,
  enrolled_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (profile_id, course_id)
);
COMMENT ON TABLE public.course_enrollments IS 'Registra qu√© usuario est√° inscrito en qu√© curso.';


-- ##############################################################
-- ## ü§ù √âPICA 4: SERVICIOS DE EXPERTOS (SIMPLIFICADO)
-- ##############################################################

-- Perfil extendido para expertos con informaci√≥n para promoci√≥n de servicios.
CREATE TABLE public.expert_profiles (
  profile_id UUID PRIMARY KEY REFERENCES public.profiles(id) ON DELETE CASCADE,
  bio TEXT, -- Biograf√≠a o resumen profesional.
  specialties TEXT[], -- Array de especialidades, ej. {'jabones', 'cremas faciales'}
  phone_number TEXT, -- Para contacto v√≠a WhatsApp.
  hourly_rate NUMERIC(10, 2), -- Costo del servicio por hora.
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE public.expert_profiles IS 'Informaci√≥n promocional para que los expertos ofrezcan sus servicios.';


-- ##############################################################
-- ## ‚ö° √çNDICES PARA MEJORAR RENDIMIENTO
-- ##############################################################

-- √çndices para claves for√°neas comunes para acelerar las consultas.
CREATE INDEX ON public.user_roles (profile_id);
CREATE INDEX ON public.tutorials (profile_id);
CREATE INDEX ON public.tutorial_comments (tutorial_id);
CREATE INDEX ON public.tutorial_comments (profile_id);
CREATE INDEX ON public.tutorial_likes (tutorial_id);
CREATE INDEX ON public.tutorial_likes (profile_id);
CREATE INDEX ON public.posts (profile_id);
CREATE INDEX ON public.post_comments (post_id);
CREATE INDEX ON public.post_comments (profile_id);
CREATE INDEX ON public.courses (expert_profile_id);
CREATE INDEX ON public.course_lessons (course_id);
CREATE INDEX ON public.course_enrollments (course_id);